
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_compare_time.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_compare_time.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_compare_time.py:


=============================================
Timing comparison with scikit-learn for Lasso
=============================================
Compare time to solve large scale Lasso problems with scikit-learn.

.. GENERATED FROM PYTHON SOURCE LINES 9-95



.. image-sg:: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :alt: lasso, enet
   :srcset: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    file_sizes:   0%|                                   | 0.00/26.8M [00:00<?, ?B/s]    file_sizes:   0%|                          | 24.6k/26.8M [00:00<05:08, 86.8kB/s]    file_sizes:   0%|                          | 49.2k/26.8M [00:00<05:08, 86.5kB/s]    file_sizes:   0%|1                           | 106k/26.8M [00:00<03:11, 139kB/s]    file_sizes:   1%|2                           | 221k/26.8M [00:01<01:49, 243kB/s]    file_sizes:   2%|4                           | 451k/26.8M [00:01<00:59, 445kB/s]    file_sizes:   2%|5                           | 516k/26.8M [00:01<01:10, 372kB/s]    file_sizes:   6%|#4                        | 1.53M/26.8M [00:02<00:18, 1.40MB/s]    file_sizes:   7%|#7                        | 1.79M/26.8M [00:02<00:19, 1.25MB/s]    file_sizes:   7%|#8                        | 1.93M/26.8M [00:02<00:24, 1.01MB/s]    file_sizes:   9%|##3                       | 2.38M/26.8M [00:02<00:20, 1.20MB/s]    file_sizes:  10%|##6                       | 2.78M/26.8M [00:03<00:19, 1.25MB/s]    file_sizes:  12%|###                       | 3.17M/26.8M [00:03<00:18, 1.29MB/s]    file_sizes:  13%|###4                      | 3.56M/26.8M [00:03<00:17, 1.32MB/s]    file_sizes:  15%|###8                      | 3.96M/26.8M [00:03<00:17, 1.34MB/s]    file_sizes:  17%|####4                     | 4.61M/26.8M [00:04<00:17, 1.25MB/s]    file_sizes:  20%|#####1                    | 5.27M/26.8M [00:04<00:14, 1.50MB/s]    file_sizes:  20%|#####3                    | 5.46M/26.8M [00:05<00:16, 1.30MB/s]    file_sizes:  21%|#####5                    | 5.73M/26.8M [00:05<00:17, 1.20MB/s]    file_sizes:  23%|#####8                    | 6.05M/26.8M [00:05<00:17, 1.18MB/s]    file_sizes:  24%|######1                   | 6.38M/26.8M [00:05<00:17, 1.17MB/s]    file_sizes:  26%|######6                   | 6.84M/26.8M [00:06<00:15, 1.30MB/s]    file_sizes:  27%|######8                   | 7.10M/26.8M [00:06<00:16, 1.19MB/s]    file_sizes:  28%|#######3                  | 7.56M/26.8M [00:06<00:14, 1.31MB/s]    file_sizes:  29%|#######5                  | 7.82M/26.8M [00:07<00:15, 1.20MB/s]    file_sizes:  31%|########                  | 8.28M/26.8M [00:07<00:14, 1.32MB/s]    file_sizes:  32%|########2                 | 8.54M/26.8M [00:07<00:15, 1.20MB/s]    file_sizes:  34%|########7                 | 9.00M/26.8M [00:07<00:13, 1.32MB/s]    file_sizes:  35%|#########1                | 9.40M/26.8M [00:08<00:12, 1.34MB/s]    file_sizes:  37%|#########5                | 9.79M/26.8M [00:08<00:12, 1.35MB/s]    file_sizes:  38%|#########8                | 10.1M/26.8M [00:08<00:12, 1.29MB/s]    file_sizes:  39%|##########1               | 10.4M/26.8M [00:09<00:13, 1.25MB/s]    file_sizes:  41%|##########5               | 10.9M/26.8M [00:09<00:11, 1.36MB/s]    file_sizes:  42%|##########9               | 11.3M/26.8M [00:09<00:11, 1.36MB/s]    file_sizes:  44%|###########3              | 11.7M/26.8M [00:10<00:14, 1.05MB/s]    file_sizes:  47%|############2             | 12.6M/26.8M [00:10<00:11, 1.27MB/s]    file_sizes:  48%|############4             | 12.9M/26.8M [00:11<00:11, 1.20MB/s]    file_sizes:  50%|############8             | 13.3M/26.8M [00:11<00:10, 1.24MB/s]    file_sizes:  50%|#############             | 13.4M/26.8M [00:11<00:12, 1.04MB/s]    file_sizes:  51%|#############3            | 13.7M/26.8M [00:11<00:12, 1.07MB/s]    file_sizes:  52%|#############6            | 14.0M/26.8M [00:12<00:11, 1.09MB/s]    file_sizes:  54%|#############9            | 14.4M/26.8M [00:12<00:11, 1.11MB/s]    file_sizes:  55%|##############4           | 14.8M/26.8M [00:12<00:09, 1.25MB/s]    file_sizes:  57%|##############7           | 15.2M/26.8M [00:13<00:08, 1.29MB/s]    file_sizes:  58%|###############1          | 15.6M/26.8M [00:13<00:08, 1.31MB/s]    file_sizes:  60%|###############5          | 16.0M/26.8M [00:13<00:08, 1.33MB/s]    file_sizes:  61%|###############8          | 16.3M/26.8M [00:13<00:08, 1.22MB/s]    file_sizes:  62%|################2         | 16.7M/26.8M [00:14<00:07, 1.33MB/s]    file_sizes:  64%|################6         | 17.1M/26.8M [00:14<00:07, 1.34MB/s]    file_sizes:  65%|################8         | 17.4M/26.8M [00:14<00:07, 1.22MB/s]    file_sizes:  67%|#################3        | 17.9M/26.8M [00:15<00:06, 1.33MB/s]    file_sizes:  68%|#################7        | 18.2M/26.8M [00:15<00:06, 1.35MB/s]    file_sizes:  70%|##################        | 18.6M/26.8M [00:15<00:05, 1.36MB/s]    file_sizes:  71%|##################3       | 18.9M/26.8M [00:15<00:06, 1.23MB/s]    file_sizes:  72%|##################7       | 19.4M/26.8M [00:16<00:05, 1.34MB/s]    file_sizes:  74%|###################1      | 19.8M/26.8M [00:16<00:05, 1.23MB/s]    file_sizes:  75%|###################5      | 20.1M/26.8M [00:16<00:04, 1.40MB/s]    file_sizes:  76%|###################7      | 20.3M/26.8M [00:17<00:05, 1.18MB/s]    file_sizes:  76%|###################8      | 20.5M/26.8M [00:17<00:05, 1.09MB/s]    file_sizes:  77%|####################      | 20.6M/26.8M [00:17<00:05, 1.16MB/s]    file_sizes:  78%|####################1     | 20.8M/26.8M [00:17<00:05, 1.11MB/s]    file_sizes:  78%|####################3     | 20.9M/26.8M [00:17<00:05, 1.11MB/s]    file_sizes:  79%|####################5     | 21.2M/26.8M [00:17<00:05, 1.03MB/s]    file_sizes:  80%|####################8     | 21.5M/26.8M [00:18<00:04, 1.08MB/s]    file_sizes:  82%|#####################2    | 21.8M/26.8M [00:18<00:04, 1.10MB/s]    file_sizes:  83%|#####################5    | 22.2M/26.8M [00:18<00:04, 1.12MB/s]    file_sizes:  85%|#####################9    | 22.6M/26.8M [00:19<00:03, 1.27MB/s]    file_sizes:  86%|######################2   | 22.9M/26.8M [00:19<00:03, 1.16MB/s]    file_sizes:  87%|######################6   | 23.4M/26.8M [00:19<00:02, 1.30MB/s]    file_sizes:  88%|######################9   | 23.6M/26.8M [00:19<00:02, 1.19MB/s]    file_sizes:  90%|#######################3  | 24.1M/26.8M [00:20<00:02, 1.31MB/s]    file_sizes:  91%|#######################6  | 24.3M/26.8M [00:20<00:02, 1.20MB/s]    file_sizes:  93%|########################  | 24.8M/26.8M [00:20<00:01, 1.32MB/s]    file_sizes:  94%|########################4 | 25.2M/26.8M [00:21<00:01, 1.34MB/s]    file_sizes:  95%|########################7 | 25.5M/26.8M [00:21<00:01, 1.22MB/s]    file_sizes:  97%|#########################1| 25.9M/26.8M [00:21<00:00, 1.33MB/s]    file_sizes:  98%|#########################5| 26.3M/26.8M [00:21<00:00, 1.35MB/s]    file_sizes: 100%|#########################9| 26.7M/26.8M [00:22<00:00, 1.36MB/s]    file_sizes: 100%|##########################| 26.8M/26.8M [00:22<00:00, 1.20MB/s]






|

.. code-block:: default



    import time
    import warnings
    import numpy as np
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from libsvmdata import fetch_libsvm

    from sklearn.exceptions import ConvergenceWarning
    from sklearn.linear_model import Lasso as Lasso_sklearn
    from sklearn.linear_model import ElasticNet as Enet_sklearn

    from skglm import Lasso, ElasticNet

    warnings.filterwarnings('ignore', category=ConvergenceWarning)


    def compute_obj(X, y, w, alpha, l1_ratio=1):
        loss = norm(y - X @ w) ** 2 / (2 * len(y))
        penalty = (alpha * l1_ratio * np.sum(np.abs(w))
                   + 0.5 * alpha * (1 - l1_ratio) * norm(w) ** 2)
        return loss + penalty


    X, y = fetch_libsvm("news20.binary"
                        )
    alpha = np.max(np.abs(X.T @ y)) / len(y) / 10

    dict_sklearn = {}
    dict_sklearn["lasso"] = Lasso_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12)

    dict_sklearn["enet"] = Enet_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    dict_ours = {}
    dict_ours["lasso"] = Lasso(
        alpha=alpha, fit_intercept=False, tol=1e-12)
    dict_ours["enet"] = ElasticNet(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    models = ["lasso", "enet"]

    fig, axarr = plt.subplots(2, 1, constrained_layout=True)

    for ax, model, l1_ratio in zip(axarr, models, [1, 0.5]):
        pobj_dict = {}
        pobj_dict["sklearn"] = list()
        pobj_dict["us"] = list()

        time_dict = {}
        time_dict["sklearn"] = list()
        time_dict["us"] = list()

        # Remove compilation time
        dict_ours[model].max_iter = 10_000
        w_star = dict_ours[model].fit(X, y).coef_
        pobj_star = compute_obj(X, y, w_star, alpha, l1_ratio)
        for n_iter_sklearn in np.unique(np.geomspace(1, 50, num=15).astype(int)):
            dict_sklearn[model].max_iter = n_iter_sklearn

            t_start = time.time()
            w_sklearn = dict_sklearn[model].fit(X, y).coef_
            time_dict["sklearn"].append(time.time() - t_start)
            pobj_dict["sklearn"].append(compute_obj(X, y, w_sklearn, alpha, l1_ratio))

        for n_iter_us in range(1, 10):
            dict_ours[model].max_iter = n_iter_us
            t_start = time.time()
            w = dict_ours[model].fit(X, y).coef_
            time_dict["us"].append(time.time() - t_start)
            pobj_dict["us"].append(compute_obj(X, y, w, alpha, l1_ratio))

        ax.semilogy(
            time_dict["sklearn"], pobj_dict["sklearn"] - pobj_star, label='sklearn')
        ax.semilogy(
            time_dict["us"], pobj_dict["us"] - pobj_star, label='skglm')

        ax.set_ylim((1e-10, 1))
        ax.set_title(model)
        ax.legend()
        ax.set_ylabel("Objective suboptimality")

    axarr[1].set_xlabel("Time (s)")
    plt.show(block=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.644 seconds)


.. _sphx_glr_download_auto_examples_plot_compare_time.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_compare_time.py <plot_compare_time.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_compare_time.ipynb <plot_compare_time.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
