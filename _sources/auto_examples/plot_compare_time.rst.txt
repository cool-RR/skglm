
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_compare_time.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_compare_time.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_compare_time.py:


=============================================
Timing comparison with scikit-learn for Lasso
=============================================
Compare time to solve large scale Lasso problems with scikit-learn.

.. GENERATED FROM PYTHON SOURCE LINES 9-95



.. image-sg:: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :alt: lasso, enet
   :srcset: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    file_sizes:   0%|                                   | 0.00/26.8M [00:00<?, ?B/s]    file_sizes:   0%|                           | 24.6k/26.8M [00:00<03:32, 126kB/s]    file_sizes:   0%|                           | 49.2k/26.8M [00:00<03:33, 125kB/s]    file_sizes:   0%|1                           | 106k/26.8M [00:00<02:12, 201kB/s]    file_sizes:   1%|2                           | 221k/26.8M [00:00<01:15, 352kB/s]    file_sizes:   2%|4                           | 451k/26.8M [00:00<00:40, 643kB/s]    file_sizes:   3%|8                           | 778k/26.8M [00:01<00:26, 991kB/s]    file_sizes:   6%|#4                        | 1.50M/26.8M [00:01<00:13, 1.86MB/s]    file_sizes:  13%|###3                      | 3.47M/26.8M [00:01<00:05, 4.41MB/s]    file_sizes:  19%|####8                     | 5.04M/26.8M [00:01<00:03, 5.52MB/s]    file_sizes:  25%|######4                   | 6.61M/26.8M [00:01<00:03, 6.28MB/s]    file_sizes:  31%|#######9                  | 8.18M/26.8M [00:02<00:02, 6.80MB/s]    file_sizes:  36%|#########4                | 9.76M/26.8M [00:02<00:02, 7.15MB/s]    file_sizes:  42%|##########9               | 11.3M/26.8M [00:02<00:02, 7.40MB/s]    file_sizes:  48%|############5             | 12.9M/26.8M [00:02<00:01, 7.55MB/s]    file_sizes:  54%|##############            | 14.5M/26.8M [00:02<00:01, 7.66MB/s]    file_sizes:  60%|###############5          | 16.0M/26.8M [00:03<00:01, 7.73MB/s]    file_sizes:  66%|#################1        | 17.6M/26.8M [00:03<00:01, 7.81MB/s]    file_sizes:  72%|##################6       | 19.2M/26.8M [00:03<00:00, 7.92MB/s]    file_sizes:  76%|###################6      | 20.2M/26.8M [00:03<00:00, 7.20MB/s]    file_sizes:  79%|####################4     | 21.0M/26.8M [00:03<00:00, 6.13MB/s]    file_sizes:  85%|######################1   | 22.9M/26.8M [00:04<00:00, 6.96MB/s]    file_sizes:  91%|#######################7  | 24.4M/26.8M [00:04<00:00, 7.32MB/s]    file_sizes:  97%|#########################2| 26.0M/26.8M [00:04<00:00, 7.51MB/s]    file_sizes: 100%|##########################| 26.8M/26.8M [00:04<00:00, 5.88MB/s]






|

.. code-block:: default



    import time
    import warnings
    import numpy as np
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from libsvmdata import fetch_libsvm

    from sklearn.exceptions import ConvergenceWarning
    from sklearn.linear_model import Lasso as Lasso_sklearn
    from sklearn.linear_model import ElasticNet as Enet_sklearn

    from skglm import Lasso, ElasticNet

    warnings.filterwarnings('ignore', category=ConvergenceWarning)


    def compute_obj(X, y, w, alpha, l1_ratio=1):
        loss = norm(y - X @ w) ** 2 / (2 * len(y))
        penalty = (alpha * l1_ratio * np.sum(np.abs(w))
                   + 0.5 * alpha * (1 - l1_ratio) * norm(w) ** 2)
        return loss + penalty


    X, y = fetch_libsvm("news20.binary"
                        )
    alpha = np.max(np.abs(X.T @ y)) / len(y) / 10

    dict_sklearn = {}
    dict_sklearn["lasso"] = Lasso_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12)

    dict_sklearn["enet"] = Enet_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    dict_ours = {}
    dict_ours["lasso"] = Lasso(
        alpha=alpha, fit_intercept=False, tol=1e-12)
    dict_ours["enet"] = ElasticNet(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    models = ["lasso", "enet"]

    fig, axarr = plt.subplots(2, 1, constrained_layout=True)

    for ax, model, l1_ratio in zip(axarr, models, [1, 0.5]):
        pobj_dict = {}
        pobj_dict["sklearn"] = list()
        pobj_dict["us"] = list()

        time_dict = {}
        time_dict["sklearn"] = list()
        time_dict["us"] = list()

        # Remove compilation time
        dict_ours[model].max_iter = 10_000
        w_star = dict_ours[model].fit(X, y).coef_
        pobj_star = compute_obj(X, y, w_star, alpha, l1_ratio)
        for n_iter_sklearn in np.unique(np.geomspace(1, 50, num=15).astype(int)):
            dict_sklearn[model].max_iter = n_iter_sklearn

            t_start = time.time()
            w_sklearn = dict_sklearn[model].fit(X, y).coef_
            time_dict["sklearn"].append(time.time() - t_start)
            pobj_dict["sklearn"].append(compute_obj(X, y, w_sklearn, alpha, l1_ratio))

        for n_iter_us in range(1, 10):
            dict_ours[model].max_iter = n_iter_us
            t_start = time.time()
            w = dict_ours[model].fit(X, y).coef_
            time_dict["us"].append(time.time() - t_start)
            pobj_dict["us"].append(compute_obj(X, y, w, alpha, l1_ratio))

        ax.semilogy(
            time_dict["sklearn"], pobj_dict["sklearn"] - pobj_star, label='sklearn')
        ax.semilogy(
            time_dict["us"], pobj_dict["us"] - pobj_star, label='skglm')

        ax.set_ylim((1e-10, 1))
        ax.set_title(model)
        ax.legend()
        ax.set_ylabel("Objective suboptimality")

    axarr[1].set_xlabel("Time (s)")
    plt.show(block=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  51.081 seconds)


.. _sphx_glr_download_auto_examples_plot_compare_time.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_compare_time.py <plot_compare_time.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_compare_time.ipynb <plot_compare_time.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
